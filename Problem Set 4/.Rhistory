}
}
return(df_q8)
}
df_q8 <- function2_q8()
# a)
rm(list = ls())
N = 10
# b)
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2 * x1 + 10 * x2 + u
# c)
regression_q8 <- lm(y - 1 ~ x2)
# d)
function1_q8 <- function(N = 1000){
rm(list =ls())
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2*x1 + 10*x2 + u
regression_q8 <- lm(y ~ x1 + x2)
test_b <- linearHypothesis(regression_q8, "x1 = 2")
F_int <- int_test$F[2]
F_b <- test_b$F[2]
return(c(regression_q8$coefficients, "sd(x1)"=sd(x1), "sd(x2)"=sd(x2), "sd(u)"=sd(u), F_b))
}
# Second, a function to simulate this several times and collect the data.
function2_q8 <- function(n=10000, N=10){
df_q8 <- data.frame(matrix(0, ncol = 7, nrow = 0))
names(df_q8) <- c("Intercept",
"First coef",
"Second coef",
"Sd(x1)",
"Sd(x2)",
"Sd(u)",
"F_b")
for (i in 1:n){
d <- function1_q8(N)
for (j in 1:7){
df_q8[i,j] <- d[j]
}
}
return(df_q8)
}
df_q8 <- function2_q8()
# a)
rm(list = ls())
N = 10
# b)
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2 * x1 + 10 * x2 + u
# c)
regression_q8 <- lm(y - 1 ~ x2)
# d)
function1_q8 <- function(N = 1000){
rm(list =ls())
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2*x1 + 10*x2 + u
regression_q8 <- lm(y ~ x1 + x2)
test_b <- linearHypothesis(regression_q8, "x1 = 2")
F_b <- test_b$F[2]
return(c(regression_q8$coefficients, "sd(x1)"=sd(x1), "sd(x2)"=sd(x2), "sd(u)"=sd(u), F_b))
}
# Second, a function to simulate this several times and collect the data.
function2_q8 <- function(n=10000, N=10){
df_q8 <- data.frame(matrix(0, ncol = 7, nrow = 0))
names(df_q8) <- c("Intercept",
"First coef",
"Second coef",
"Sd(x1)",
"Sd(x2)",
"Sd(u)",
"F_b")
for (i in 1:n){
d <- function1_q8(N)
for (j in 1:7){
df_q8[i,j] <- d[j]
}
}
return(df_q8)
}
df_q8 <- function2_q8()
# a)
rm(list = ls())
N = 10
# b)
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2 * x1 + 10 * x2 + u
# c)
regression_q8 <- lm(y - 1 ~ x2)
# d)
function1_q8 <- function(N = 1000){
rm(list =ls())
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2*x1 + 10*x2 + u
regression_q8 <- lm(y - 1 ~ x2)
test_b <- linearHypothesis(regression_q8, "x1 = 2")
F_b <- test_b$F[2]
return(c(regression_q8$coefficients, "sd(x1)"=sd(x1), "sd(x2)"=sd(x2), "sd(u)"=sd(u), F_b))
}
# Second, a function to simulate this several times and collect the data.
function2_q8 <- function(n=10000, N=10){
df_q8 <- data.frame(matrix(0, ncol = 7, nrow = 0))
names(df_q8) <- c("Intercept",
"First coef",
"Second coef",
"Sd(x1)",
"Sd(x2)",
"Sd(u)",
"F_b")
for (i in 1:n){
d <- function1_q8(N)
for (j in 1:7){
df_q8[i,j] <- d[j]
}
}
return(df_q8)
}
df_q8 <- function2_q8()
# a)
rm(list = ls())
N = 100
# b)
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2 * x1 + 10 * x2 + u
# c)
regression_q8 <- lm(y - 1 ~ x2)
# d)
function1_q8 <- function(N = 1000){
rm(list =ls())
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2*x1 + 10*x2 + u
regression_q8 <- lm(y - 1 ~ x2)
test_b <- linearHypothesis(regression_q8, "x1=2")
F_b <- test_b$F[2]
return(c(regression_q8$coefficients, "sd(x1)"=sd(x1), "sd(x2)"=sd(x2), "sd(u)"=sd(u), F_b))
}
# Second, a function to simulate this several times and collect the data.
function2_q8 <- function(n=10000, N=100){
df_q8 <- data.frame(matrix(0, ncol = 7, nrow = 0))
names(df_q8) <- c("Intercept",
"First coef",
"Second coef",
"Sd(x1)",
"Sd(x2)",
"Sd(u)",
"F_b")
for (i in 1:n){
d <- function1_q8(N)
for (j in 1:7){
df_q8[i,j] <- d[j]
}
}
return(df_q8)
}
df_q8 <- function2_q8()
# a)
rm(list = ls())
N = 100
# b)
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2 * x1 + 10 * x2 + u
# c)
regression_q8 <- lm(y ~ x1 + x2)
# d)
function1_q8 <- function(N = 1000){
rm(list =ls())
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2*x1 + 10*x2 + u
regression_q8 <- lm(y ~ x1 + x2)
test_int <- linearHypothesis(regression_q8, "(Intercept) =1")
test_b <- linearHypothesis(regression_q8, "x1=2")
F_int <- test_int$F[2]
F_b <- test_b$F[2]
return(c(regression_q8$coefficients, "sd(x1)"=sd(x1), "sd(x2)"=sd(x2), "sd(u)"=sd(u), F_int, F_b))
}
# Second, a function to simulate this several times and collect the data.
function2_q8 <- function(n=10000, N=100){
df_q8 <- data.frame(matrix(0, ncol = 8, nrow = 0))
names(df_q8) <- c("Intercept",
"First coef",
"Second coef",
"Sd(x1)",
"Sd(x2)",
"Sd(u)",
"F_int",
"F_b")
for (i in 1:n){
d <- function1_q8(N)
for (j in 1:8){
df_q8[i,j] <- d[j]
}
}
return(df_q8)
}
df_q8 <- function2_q8()
summary(df_q8)
#8.1)
# With N=10:
df_q8_1 <- function2_q8(N=10)
summary(df_q8[, 1]) # To summarize the intercept
summary(df_q8[,2]) # To summarize the first coefficient
summary(df_q8[,3]) # To summarize the second coefficient
summary(df_q8[, 7])
hist(df_q8[, 1])
hist(df_q8[,2])
hist(df_q8[,3])
hist(df_q8[, 7], breaks = "Sturges")
View(df_q8_1)
# a)
rm(list = ls())
N = 100
# b)
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2 * x1 + 10 * x2 + u
# c)
regression_q8 <- lm(y ~ x1 + x2)
# d)
function1_q8 <- function(N = 1000){
rm(list =ls())
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2*x1 + 10*x2 + u
regression_q8 <- lm(y ~ x1 + x2)
test_int <- linearHypothesis(regression_q8, "(Intercept) =1")
test_b <- linearHypothesis(regression_q8, "x1=2")
F_int <- test_int$F[2]
F_b <- test_b$F[2]
return(c(regression_q8$coefficients, "sd(x1)"=sd(x1), "sd(x2)"=sd(x2), "sd(u)"=sd(u), F_int, F_b))
}
# Second, a function to simulate this several times and collect the data.
function2_q8 <- function(n=10000, N=100){
df_q8 <- data.frame(matrix(0, ncol = 8, nrow = 0))
names(df_q8) <- c("Intercept",
"First coef",
"Second coef",
"Sd(x1)",
"Sd(x2)",
"Sd(u)",
"F_int",
"F_b")
for (i in 1:n){
d <- function1_q8(N)
for (j in 1:8){
df_q8[i,j] <- d[j]
}
}
return(df_q8)
}
df_q8 <- function2_q8()
summary(df_q8)
#8.1)
# With N=100:
df_q8_1 <- function2_q8(N=100)
summary(df_q8[, 1]) # To summarize the intercept
summary(df_q8[,2]) # To summarize the first coefficient
summary(df_q8[,3]) # To summarize the second coefficient
summary(df_q8[, 7]) # To summarize the F-stat
hist(df_q8[, 1])
hist(df_q8[,2])
hist(df_q8[,3])
hist(df_q8[, 7], breaks = "Sturges")
#8.2)
# With N=1000:
df_q8_2 <- function2_q8(N=1000)
summary(df_q8[, 1]) # To summarize the intercept
summary(df_q8[,2]) # To summarize the first coefficient
summary(df_q8[,3]) # To summarize the second coefficient
summary(df_q8[, 7])
hist(df_q8[, 1])
hist(df_q8[,2])
hist(df_q8[,3])
hist(df_q8[, 7], breaks = "Sturges") #Why is Sturges not working?
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(tab) <- list(gender = c("N=100", "N=1000"),
party  = c("1%", "5%", "Republican"))
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(critical_values) <- list(gender = c("N=100", "N=1000"),
party  = c("1%", "5%", "Republican"))
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(critical_values) <- list(c("N=100", "N=1000"),
party  = c("1%", "5%", "Republican"))
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(critical_values) <- list(c("N=100", "N=1000"),
party  = c("1%", "5%"))
critical_values
# b)
sum(df_q8_1$F_stat > critical_value1)
sum(df_q8_1$F_stat > critical_value2)
sum(df_q8_2$F_stat > critical_value3)
sum(df_q8_2$F_stat > critical_value4)
# c)
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(critical_values) <- list(Sample Size=c("N=100", "N=1000"),
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(critical_values) <- list("Sample Size"=c("N=100", "N=1000"),
Significance Level  = c("1%", "5%"))
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(critical_values) <- list(c("N=100", "N=1000"),
= c("1%", "5%"))
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(critical_values) <- list(c("N=100", "N=1000"),
c("1%", "5%"))
critical_values
# b)
sum(df_q8_1$F_stat > critical_value1)
sum(df_q8_1$F_stat > critical_value2)
sum(df_q8_2$F_stat > critical_value3)
sum(df_q8_2$F_stat > critical_value4)
# c)
View(df_q8_1)
# a)
# For N = 100
critical_value1 = qf(p=0.01, df1=1, df2=97, lower.tail = FALSE)
critical_value2 = qf(p=0.05, df1=1, df2=97, lower.tail = FALSE)
# For N = 1000
critical_value3 = qf(p=0.01, df1=1, df2=997, lower.tail = FALSE)
critical_value4 = qf(p=0.05, df1=1, df2=997, lower.tail = FALSE)
critical_values <- as.table(rbind(c(critical_value1, critical_value2), c(critical_value3, critical_value4)))
dimnames(critical_values) <- list(c("N=100", "N=1000"),
c("1%", "5%"))
critical_values
# b)
sum(df_q8_1$F_int > critical_value1)
sum(df_q8_1$F_b > critical_value1)
sum(df_q8_1$F_int > critical_value2)
sum(df_q8_1$Fb > critical_value2)
sum(df_q8_2$F_int > critical_value3)
sum(df_q8_2$F_b > critical_value3)
sum(df_q8_2$F_int > critical_value4)
sum(df_q8_2$F_b > critical_value4)
# c)
library(car)
install.packages("car")
library(ggplot2)
library(RColorBrewer)
library(plotly)
library(reshape2)
library(kableExtra)
library(tidyverse)
library(stringr)
library(data.table)
install.packages("car")
library(car)
install.packages("car")
install.packages("car")
knitr::opts_chunk$set(echo = TRUE)
# a)
rm(list = ls())
N = 10
# b)
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2 * x1 + 10 * x2 + u
# c)
regression_q8 <- lm(y ~ x1 + x2)
# d)
function1_q8 <- function(N = 10){
rm(list =ls())
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2*x1 + 10*x2 + u
regression_q8 <- lm(y ~ x1 + x2)
F_test_both <- linearHypothesis(regression_q8, c("(Intercept) =1", "x1=2"))
F_test <- F_test_both$F[2]
return(c(regression_q8$coefficients, "sd(x1)"=sd(x1), "sd(x2)"=sd(x2), "sd(u)"=sd(u), F_test))
}
# Second, a function to simulate this several times and collect the data.
function2_q8 <- function(n=10000, N=10){
df_q8 <- data.frame(matrix(0, ncol = 7, nrow = 0))
names(df_q8) <- c("Intercept",
"First coef",
"Second coef",
"Sd(x1)",
"Sd(x2)",
"Sd(u)",
"F_test")
for (i in 1:n){
d <- function1_q8(N)
for (j in 1:7){
df_q8[i,j] <- d[j]
}
}
return(df_q8)
}
df_q8 <- function2_q8()
load(car)
library(car)
# a)
rm(list = ls())
N = 10
# b)
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2 * x1 + 10 * x2 + u
# c)
regression_q8 <- lm(y ~ x1 + x2)
# d)
function1_q8 <- function(N = 10){
rm(list =ls())
x1 <- runif(N, min = 0, max = 1)
x2 <- rbinom(N, 1, 0.3)
u <- rchisq(N, df = 1) - 1
y <- 1 + 2*x1 + 10*x2 + u
regression_q8 <- lm(y ~ x1 + x2)
F_test_both <- linearHypothesis(regression_q8, c("(Intercept) =1", "x1=2"))
F_test <- F_test_both$F[2]
return(c(regression_q8$coefficients, "sd(x1)"=sd(x1), "sd(x2)"=sd(x2), "sd(u)"=sd(u), F_test))
}
# Second, a function to simulate this several times and collect the data.
function2_q8 <- function(n=10000, N=10){
df_q8 <- data.frame(matrix(0, ncol = 7, nrow = 0))
names(df_q8) <- c("Intercept",
"First coef",
"Second coef",
"Sd(x1)",
"Sd(x2)",
"Sd(u)",
"F_test")
for (i in 1:n){
d <- function1_q8(N)
for (j in 1:7){
df_q8[i,j] <- d[j]
}
}
return(df_q8)
}
df_q8 <- function2_q8()
