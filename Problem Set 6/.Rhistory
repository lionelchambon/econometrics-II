install.packages("skedastic")
library(heteroskedastic)
library(skedastic)
# Creating the required variables:
n <- 10000
x_1 <- rnorm(n, mean = 2, sd= sqrt(3))
aux <- rnorm(n, mean = 0, sd = 1)
u <- 2*x_1*aux
y <- 2 + 3*x_1 + u
df1 <- data_frame(x_1, aux, u, y)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(kableExtra)
library(tidyverse)
library(dplyr)
library(lmtest)
library(skedastic)
# Creating the required variables:
n <- 10000
x_1 <- rnorm(n, mean = 2, sd= sqrt(3))
aux <- rnorm(n, mean = 0, sd = 1)
u <- 2*x_1*aux
y <- 2 + 3*x_1 + u
df1 <- data_frame(x_1, aux, u, y)
white(reg_q1)
# Creating the regression:
reg_q1 <- lm(y ~ x_1)
residuals <- resid(reg_q1)
plot(x_1, residuals, main = "Scatter Plot of Residuals on x1", xlab = "x1", ylab = "Residuals")
df2 <- data_frame(x_1, aux, u, y, residuals)
df2 %>%
ggplot() +
aes(x = x_1, y = residuals) +
geom_point(color = "darkblue") +
labs(x = "Value of x1", y = "Residuals")
white(reg_q1)
# I first create a new dataframe that includes predicted values and residuals:
reg_q1 <- lm(y ~ x_1)
df3 <- data_frame(x_1, aux, u, y, predict(reg_q1), residuals(reg_q1))
df3 %>%
ggplot() +
aes(x = x_1, y = y) +
geom_point(color = "red") +
geom_smooth(method = "lm", col = "blue") +
labs(x = "Value of x1", y = "Values of Y")
# I first create a new dataframe that includes predicted values and residuals:
reg_q1 <- lm(y ~ x_1)
df3 <- data_frame(x_1, aux, u, y, predict(reg_q1), residuals(reg_q1))
df3 %>%
ggplot() +
aes(x = x_1, y = y) +
geom_point(color = "red") +
geom_smooth(method = "lm", col = "blue") +
labs(x = "Value of x1", y = "Value of Y")
# Estimating the model:
model_q3 <- lm((residuals(reg_q1)^2) ~ predict(reg_q1) + ((predict(reg_q1))^2), data = df3)
summary(model_q3)
r_squared <- summary(model_q3)$r.squared
# Obtaining the critical value:
test_threshold <- qchisq(0.95, df = 2)
print(test_threshold)
# We obtain a critical value of ~ 5.99.
(r_squared*10000)
(r_squared)
# Obtaining the critical value:
test_threshold <- qchisq(0.95, df = 2)
print(test_threshold)
# We obtain a critical value of ~ 5.99.
(r_squared)
# Obtaining the critical value:
test_threshold <- qchisq(0.95, df = 2)
print(test_threshold)
# We obtain a critical value of ~ 5.99.
(r_squared)
(predict_regq1)
((predict(reg_q1))
((predict(reg_q1))
print(predict(reg_q1)
print(predict(reg_q1))
(r_squared)
# Obtaining the critical value:
test_threshold <- qchisq(0.95, df = 2)
print(test_threshold)
# We obtain a critical value of ~ 5.99.
(r_squared)
# Obtaining the critical value:
test_threshold <- qchisq(0.95, df = 2)
print(test_threshold)
# We obtain a critical value of ~ 5.99.
manual_tstat <- n*(r_squared)
print(manual_tstat)
# Creating the regression:
reg_q1 <- lm(y ~ x_1)
residuals <- resid(reg_q1)
plot(x_1, residuals, main = "Scatter Plot of Residuals on x1", xlab = "x1", ylab = "Residuals")
df2 <- data_frame(x_1, aux, u, y, residuals)
df2 %>%
ggplot() +
aes(x = x_1, y = residuals) +
geom_point(color = "darkblue") +
labs(x = "Value of $x_1$", y = "Residuals")
# Creating the regression:
reg_q1 <- lm(y ~ x_1)
residuals <- resid(reg_q1)
plot(x_1, residuals, main = "Scatter Plot of Residuals on x1", xlab = "x1", ylab = "Residuals")
df2 <- data_frame(x_1, aux, u, y, residuals)
df2 %>%
ggplot() +
aes(x = x_1, y = residuals) +
geom_point(color = "darkblue") +
labs(x = "Value of x1", y = "Residuals")
# Creating the regression:
reg_q1 <- lm(y ~ x_1)
residuals <- resid(reg_q1)
df2 <- data_frame(x_1, aux, u, y, residuals)
df2 %>%
ggplot() +
aes(x = x_1, y = residuals) +
geom_point(color = "darkblue") +
labs(x = "Value of x1", y = "Residuals")
help("white")
